@using System.Configuration
<div class="jumbotron">
    <h1>Rooms Booking Client</h1>

</div>
<div id="loginBlock" data-bind="visible: !viewModel.token()">
    @Html.Partial("_LoginPartial")
</div>

<div id="mainBlock" data-bind="visible: viewModel.token()">
    <div id="infoBlock" data-bind="visible: !viewModel.displayCreate()">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">Meeting rooms</div>
                <div class="panel-body">
                    <div id="roomsGrid"></div>
                </div>
            </div>
        </div>
        <div class="col-lg-12" data-bind="if: viewModel.selectedItem()">
            <div class="panel panel-default">
                <div class="panel-heading">Room № <span data-bind="text: viewModel.selectedItem().roomNumber"></span></div>
                <hr/>
                <div class="form-horizontal">
                    <div class="form-group">
                        <label class="col-md-2 control-label" for="RoomNumber">Room number</label>
                        <div class="col-md-10">
                            <input class="form-control" id="RoomNumber" name="RoomNumber" type="text" data-bind="value: viewModel.selectedItem().roomNumber" disabled="disabled"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-2 control-label" for="NumberOfSeats">Number of seats</label>
                        <div class="col-md-10">
                            <input class="form-control" data-bind="viewModel: model.selectedItem().numberOfSeats" type="text" id="NumberOfSeats" name="NumberOfSeats" disabled="disabled"/>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <div class="checkbox">
                                <input type="checkbox" id="IsProjectorAvailable" name="IsProjectorAvailable" data-bind="checked: viewModel.selectedItem().isProjectorAvailable" disabled="disabled"/>
                                <label for="IsProjectorAvailable">Projector available</label>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <div class="checkbox">
                                <input type="checkbox" id="IsBoardAvailable" name="IsBoardAvailable" data-bind="checked: viewModel.selectedItem().isBoardAvailable" disabled="disabled"/>
                                <label for="IsBoardAvailable">Board available</label>
                            </div>
                        </div>
                        <div class="col-md-offset-10 col-md-10">
                            <input data-bind="click: viewModel.createRequestClick" type="button" value="Create request" class="btn btn-default"/>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="createBlock" data-bind="if: viewModel.displayCreate()">
        <div class="panel panel-default">
            <div class="panel-heading">Create request</div>
            <hr/>
            <div class="form-horizontal">
                <div class="form-group">
                    <label class="col-md-2 control-label" for="RoomNumber">Room number</label>
                    <div class="col-md-10">
                        <input class="form-control" id="RoomNumberCreate" name="RoomNumberCreate" type="text" data-bind="value: viewModel.selectedItem().roomNumber" disabled="disabled"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label" for="RoomNumber">From</label>
                    <div class="col-md-10">
                        <input class="form-control" id="DateFromCreate" name="DateFromCreate" type="text" data-bind="value: viewModel.newRequest().dateFrom"/>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-md-2 control-label" for="RoomNumber">To</label>
                    <div class="col-md-10">
                        <input class="form-control" id="DateToCreate" name="DateToCreate" type="text" data-bind="value: viewModel.newRequest().dateTo"/>
                    </div>
                    <div class="col-md-offset-10 col-md-10">
                        <input data-bind="visible: viewModel.newRequest().dateFrom && viewModel.newRequest().dateTo, click: viewModel.saveRequest" type="button" value="Save" class="btn btn-default" />
                        <input data-bind="click: viewModel.cancelCreate" type="button" value="Cancel" class="btn btn-default"/>
                    </div>
                </div>
                
            </div>
            
        </div>
    </div>
</div>


@section scripts{
    <script type="text/javascript">
        var tokenKey = "accessToken";
        var serverUrl = '@ConfigurationManager.AppSettings["RoomsBookingServerUri"]';

        ko.extenders.required = function(target, overrideMessage) {
            //add some sub-observables to our observable
            target.hasError = ko.observable();
            target.validationMessage = ko.observable();

            //define a function to do validation
            function validate(newValue) {
                target.hasError(newValue ? false : true);
                target.validationMessage(newValue ? "" : overrideMessage || "This field is required");
            }

            //initial validation
            validate(target());

            //validate whenever the value changes
            target.subscribe(validate);

            //return the original observable
            return target;
        };

        var viewModel = {
            token: ko.observable(sessionStorage.getItem(tokenKey)),
            login: {
                login: ko.observable("").extend({ required: "Login is required" }),
                password: ko.observable("").extend({ required: "Password is required" })
            },
            selectedItem: ko.observable(),
            displayCreate: ko.observable(false),
            newRequest: ko.observable({
                roomId: ko.observable(),
                dateFrom: ko.observable(),
                dateTo: ko.observable()
            }),

            loginClick: function() {
                var loginData = {
                    grant_type: 'password',
                    username: self.viewModel.login.login,
                    password: self.viewModel.login.password
                };
                $.ajax({
                    type: 'POST',
                    url: serverUrl + 'Token',
                    data: loginData
                }).success(function(data) {
                    sessionStorage.setItem(tokenKey, data.access_token);
                    self.viewModel.token(data.access_token);
                    //refreshRequestsGrid();
                });
            },
            cancelCreate: function() {
                self.viewModel.displayCreate(false);
            },

            createRequestClick: function() {
                self.viewModel.displayCreate(true);
                self.viewModel.newRequest().roomId(self.viewModel.selectedItem().id);
                $("#DateFromCreate").kendoDateTimePicker({
                    min: new Date()
                });
                $("#DateToCreate").kendoDateTimePicker({
                    min: new Date()
                });
            },

            initGrid: function() {
                $("#roomsGrid").kendoGrid({
                    columns: [
                        { "title": "Room", "width": "100px", "field": "roomNumber" },
                        { "title": "Number of seats", "width": "200px", "field": "numberOfSeats" },
                        {
                            field: '',
                            title: '',
                            name: "Marker board",
                            template: '<span class="glyphicon glyphicon-picture #=isBoardAvailable ? "" : "hidden"#"></span>',
                            width: 40

                        },
                        {
                            field: '',
                            title: '',
                            name: "Projector",
                            template: '<span class="glyphicon glyphicon-facetime-video #=isProjectorAvailable ? "" : "hidden"#"></span>',
                            width: 40

                        }
                    ],
                    height: 350,
                    selectable: "row",
                    change: function(e) {
                        var grid = e.sender;
                        self.viewModel.selectedItem(grid.dataItem(this.select()));
                    },
                    dataSource: {
                        transport: {
                            read: {
                                url: serverUrl + "api/MeetingRooms",

                                beforeSend: function(request) {
                                    request.setRequestHeader('Authorization', 'Bearer ' + self.viewModel.token());
                                }
                            }

                        },
                        pageSize: 8,
                        serverPaging: true,
                        schema: {
                            data: function(data) {
                                return data.list;
                            },
                            total: function(data) {
                                return data.entityCount;
                            },

                            model: {
                                id: "id",
                                fields: {
                                    roomNumber: { type: "string" },
                                    numberOfSeats: { type: "number" },
                                    isBoardAvailable: { type: "boolean" },
                                    isProjectorAvailable: { type: "boolean" }
                                }
                            }
                        }
                    },

                    pageable: true
                });
            },
            refreshRequestsGrid: function() {
                $("#roomsGrid").data("kendoGrid").dataSource.read();
            },
            saveRequest: function () {
                var createData = {
                    dateTimeFrom: self.viewModel.newRequest().dateFrom,
                    dateTimeTo: self.viewModel.newRequest().dateTo,
                    meetingRoomId: self.viewModel.selectedItem().id
                };
                $.ajax({
                    type: 'POST',
                    url: serverUrl + 'api/BookingRequests',
                    data:  ko.toJSON(createData),
                    contentType: "application/json",
                    beforeSend: function (request) {
                        request.setRequestHeader('Authorization', 'Bearer ' + self.viewModel.token());
                    }
                }).success(function (data) {
                    self.viewModel.cancelCreate();
                });
            },
            init: function() {

            }
        };

        $(document).ready(function() {
            viewModel.token.subscribe(function(newToken) {
                if (viewModel.token()) {
                    viewModel.initGrid();
                }
            });

            ko.applyBindings(viewModel);
            viewModel.init();
            viewModel.token.valueHasMutated();

            $.connection.hub.url = '@(ConfigurationManager.AppSettings["RoomsBookingServerUri"] + "signalr")';
            var booking = $.connection.bookingHub;
            booking.client.sendNotification = function (data) {
                alert(data);
            };

            $.connection.hub.start().done(function () {
            });
        });

    </script>
}
